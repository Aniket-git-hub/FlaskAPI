services:
    web:
        build:
            context: .
            dockerfile: docker/flask/Dockerfile
        container_name: flask_app
        restart: always
        command: ["gunicorn", "app:app", "-b", "0.0.0.0:8000", "-w", "4"]
        volumes:
            - .:/app
            - ./uploads:/uploads
            - ./logos:/logos
            - ./processed_videos:/processed_videos
        env_file:
            - .env
        depends_on:
            - db
            - redis
        healthcheck:
            test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
            interval: 30s
            timeout: 10s
            retries: 5
            start_period: 40s
        networks:
            - app-network
        ports:
            - "8000:8000"

    celery_worker:
        build:
            context: .
            dockerfile: docker/celery/Dockerfile
        container_name: celery_worker
        restart: always
        command: ["celery", "-A", "app.celery", "worker", "--concurrency=12"]
        user: celery:celery
        volumes:
            - .:/app
            - ./uploads:/uploads
        env_file:
            - .env
        depends_on:
            - db
            - redis
            - web
        networks:
            - app-network

    flower:
        image: mher/flower:latest
        container_name: celery_flower
        restart: always
        command:
            ["celery", "--broker=redis://redis:6379/0", "flower", "--port=5555"]
        ports:
            - "5555:5555"
        depends_on:
            - redis
        networks:
            - app-network

    db:
        image: postgres:latest
        container_name: postgres_db
        restart: always
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=postgres
            - POSTGRES_DB=postgres
        env_file:
            - .env
        volumes:
            - postgres_data:/var/lib/postgresql/data
        networks:
            - app-network

    redis:
        image: redis:6
        container_name: redis
        restart: always
        networks:
            - app-network

    nginx:
        build:
        context: .
        dockerfile: docker/nginx/Dockerfile
        container_name: nginx
        restart: always
        depends_on:
        - web
        ports:
        - "80:80"
        volumes:
        - ./docker/nginx/html/:/usr/share/nginx/html/  # Ensure this directory contains your maintenance.html
        - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
        networks:
        - app-network

    adminer:
        image: adminer
        container_name: adminer
        restart: always
        ports:
            - "8080:8080"
        networks:
            - app-network

volumes:
    postgres_data:

networks:
    app-network:
        driver: bridge
